<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "web" middleware group. Make something great!
|
*/

// A route that is vulnerable to Open Redirect vulnerability
// Route::get('/vulnerable', function (Request $request) {
//     // Get the 'redirect' parameter from the query string
//     $redirectUrl = $request->input('redirect');

//     // Perform the redirect
//     return redirect($redirectUrl);
// });


// Using fixed redirects
// Route::get('/', function () {
//     return view('welcome');
// })->name('home');

// Route::get('/vulnerable', function (Request $request) {
//     return redirect()->route('home');
// });


//  Whitelisting posssible redirects
// Route::get('/vulnerable', function (Request $request) {
//     // Define trusted redirect destinations
//     $whitelistedDestinations = [
//         'https://snyk.io/',
//     ];

//     // Get the 'redirect' parameter from the params
//     $redirectUrl = $request->input('redirect');

//     // Check if the input URL is in the whitelist
//     if (in_array($redirectUrl, $whitelistedDestinations)) {
//         // Perform the redirect
//         return redirect($redirectUrl);
//     }

//     // Handle invalid redirects, for example:
//     return redirect('/'); // Redirect to a safe default page
// });


// Disallow redirecting to another domain
Route::get('/vulnerable', function (Request $request) {
    $inputUrl = $request->input('redirect');

    // Prepend the protocol if missing
    if (!parse_url($inputUrl, PHP_URL_SCHEME)) {
        $inputUrl = 'http://' . $inputUrl;
    }

    $parsedInputUrl = parse_url($inputUrl);

    // Check if the URL is valid and has a host component
    if ($parsedInputUrl && array_key_exists('host', $parsedInputUrl) && $parsedInputUrl['host'] === 'localhost') {
        return redirect()->to($inputUrl);
    }

    // Disallow redirect with a 403 Forbidden status code
    return response('Forbidden: Cannot redirect to another domain', Response::HTTP_FORBIDDEN);
});
